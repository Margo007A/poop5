import logging
import json
import random
import asyncio
import os
import sys
import re
from datetime import datetime
import pytz

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = "8276571944:AAF3ypIPxV-IPJYW-Rr6PiEql8vUONzEGeE"
GROUP_CHAT_ID = -1002444770684
THREAD_ID = 2
ADMIN_ID = 1118647995
REMINDER_HOUR = 20
REMINDER_MINUTE = 50
MSK = pytz.timezone("Europe/Moscow")
USER_DATA_FILE = "subscribers.json"

# === –õ–æ–≥–∏ ===
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

# === –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ===
def load_users():
    if not os.path.exists(USER_DATA_FILE):
        return []
    try:
        with open(USER_DATA_FILE, "r") as f:
            return json.load(f)
    except:
        return []

def save_users(users):
    with open(USER_DATA_FILE, "w") as f:
        json.dump(users, f)

subscribers = load_users()

def escape(text):
    return re.sub(r'([_*\[\]()~`>#+=|{}.!\\-])', r'\\\1', str(text))

# === –®—É—Ç–∫–∏ ===
JOKES = [
    "‚ö†Ô∏è –°–∫—Ä–∏–Ω –∞–∫—Ç–∏–≤–∞ ‚Äî —ç—Ç–æ —Ç–≤–æ—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å. –°–¥–µ–ª–∞–π —Å–µ–π—á–∞—Å.",
    "üîî 20:50 –ú–°–ö. –í—Ä–µ–º—è —Å–∫—Ä–∏–Ω–æ–≤. –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏.",
    "üïí –°–∫—Ä–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–¥–µ–ª–∞–Ω —Ç–æ—á–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏. –ë–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫.",
    "üìã –ù–µ –∑–∞–±—É–¥—å: –∞–∫—Ç–∏–≤ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å. –°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω.",
    "‚è≥ –í—Ä–µ–º–µ–Ω–∏ –º–∞–ª–æ. –°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.",
    "üì∑ –≠—Ç–æ –≤–∞–∂–Ω–æ ‚Äî —Å–∫—Ä–∏–Ω –∞–∫—Ç–∏–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π.",
    "üí° –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –°–∫—Ä–∏–Ω—å.",
    "‚úÖ –°–¥–µ–ª–∞–ª —Å–∫—Ä–∏–Ω? –ú–æ–ª–æ–¥–µ—Ü. –ü—Ä–æ–ø—É—Å—Ç–∏–ª? –ù–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç, —á—Ç–æ —Ç—ã –±—ã–ª.",
    "üö® –°–∫—Ä–∏–Ω ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ù–µ —É–ø—É—Å—Ç–∏ –º–æ–º–µ–Ω—Ç.",
    "üìé –û–¥–∏–Ω —Å–∫—Ä–∏–Ω = –æ–¥–Ω–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ. –°–µ–π—á–∞—Å –≤–∞–∂–Ω–æ.",
    "üîç –ù–∏–∫—Ç–æ –Ω–µ –∑–∞—Å–∫—Ä–∏–Ω–∏—Ç –∑–∞ —Ç–µ–±—è. –°–¥–µ–ª–∞–π —ç—Ç–æ —Å–∞–º.",
    "üìÜ –°–∫—Ä–∏–Ω –¥–µ–ª–∞–µ—Ç—Å—è –Ω–µ '–∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ', –∞ '–∫–æ–≥–¥–∞ –Ω–∞–¥–æ'. –°–µ–π—á–∞—Å –Ω–∞–¥–æ.",
    "üß≠ –°–∫—Ä–∏–Ω ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä —Ç–≤–æ–µ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å —Å–µ–±—è.",
    "üïπ –ù–µ –≤—ã–∫–ª—é—á–∞–π –≥–æ–ª–æ–≤—É ‚Äî —Å–∫—Ä–∏–Ω—å –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è.",
    "üóÇ –¢–≤–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ —Ç–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è. –°–∫—Ä–∏–Ω –∑–∞ –Ω–µ—ë –æ—Ç–≤–µ—á–∞–µ—Ç.",
    "üì£ –¢–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏–ª–∏. –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –∑–∞—Å–∫—Ä–∏–Ω–∏—Ç—å. –î–µ–ª–∞–π.",
    "üì∂ –°–≤—è–∑—å –µ—Å—Ç—å. Telegram —Ä–∞–±–æ—Ç–∞–µ—Ç. –ó–Ω–∞—á–∏—Ç, –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω.",
    "üìå –ù–µ –ø—Ä–æ—Å–ø–∏. –°–∫—Ä–∏–Ω–∏—Ç—å –Ω—É–∂–Ω–æ —Å–µ–π—á–∞—Å.",
    "‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫. –î–µ–ª–∞–π —Å–∫—Ä–∏–Ω—ã.",
    "üì§ –°–∫—Ä–∏–Ω ‚Äî —ç—Ç–æ –æ—Ç—á—ë—Ç, –∞ –Ω–µ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å.",
    "üìë –ë–µ–∑ —Å–∫—Ä–∏–Ω–∞ ‚Äî —Ç—ã –∫–∞–∫ –±—É–¥—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª.",
    "üß± –°—Ç—Ä–æ–π –¥–æ–≤–µ—Ä–∏–µ ‚Äî —Å –∫–∞–∂–¥–æ–≥–æ —Å–∫—Ä–∏–Ω–∞.",
    "üßæ –°–∫—Ä–∏–Ω ‚Äî –∫–≤–∏—Ç–∞–Ω—Ü–∏—è –æ —Ç–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
    "üß® –û—Ç–ª–æ–∂–∏—à—å ‚Äî –∑–∞–±—É–¥–µ—à—å. –°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω —Å—Ä–∞–∑—É.",
    "üìä –î–µ–ª–∞–π —Å–∫—Ä–∏–Ω ‚Äî –æ–Ω –º–Ω–æ–≥–æ–µ –∑–Ω–∞—á–∏—Ç.",
    "üì° –°–∏–≥–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω. –°–∫—Ä–∏–Ω –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–π.",
    "üìù –£—Å–ø–µ–π –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –≤–∫–ª–∞–¥. –°–∫—Ä–∏–Ω—å.",
    "üìà –°–∫—Ä–∏–Ω—ã –≤–∞–∂–Ω—ã. –û–Ω–∏ –≥–æ–≤–æ—Ä—è—Ç –∑–∞ —Ç–µ–±—è.",
    "üí¨ –ö—Å–µ–Ω–∏—è –ê–Ω–∞—Ç–æ–ª—å–µ–≤–Ω–∞ –±—É–¥–µ—Ç –∑–ª–∏—Ç—å—Å—è. –°–∫—Ä–∏–Ω—å –∞–∫—Ç–∏–≤ –±—ã—Å—Ç—Ä–µ–µ!",
    "üîê –°–∫—Ä–∏–Ω ‚Äî —Ç–≤–æ–π –¥–æ—Å—Ç—É–ø –∫ –¥–æ–≤–µ—Ä–∏—é.",
    "üéØ –ú–µ—Ç–∫–∏–π —Å–∫—Ä–∏–Ω ‚Äî –≤–æ–≤—Ä–µ–º—è —Å–¥–µ–ª–∞–Ω–Ω—ã–π.",
    "üîÅ –ü—Ä–∏–≤—ã—á–∫–∞ —Å–∫—Ä–∏–Ω–∏—Ç—å ‚Äî —ç—Ç–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞.",
    "üì∏ –°–µ–π—á–∞—Å ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–ª—è —Å–∫—Ä–∏–Ω–∞.",
    "üìã –ù–µ –∑–∞–±—É–¥—å. –°–∫—Ä–∏–Ω –Ω—É–∂–µ–Ω –∏–º–µ–Ω–Ω–æ —Å–µ–π—á–∞—Å.",
    "üìé –°–∫—Ä–∏–Ω –Ω–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—é—Ç. –ï–≥–æ –¥–µ–ª–∞—é—Ç.",
    "üß† –°–∫—Ä–∏–Ω ‚Äî —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.",
    "üëÅ –ê–∫—Ç–∏–≤ ‚Äî —ç—Ç–æ –≤–∏–¥–Ω–æ. –°–∫—Ä–∏–Ω –ø–æ–∫–∞–∂–µ—Ç.",
    "üß≠ –°–∫—Ä–∏–Ω ‚Äî —Ç–≤–æ–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä. –ù–µ —Å–±–µ–π—Å—è.",
    "üí¨ –°–∫—Ä–∏–Ω ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—å–±–∞. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å.",
    "üöß –ë–µ–∑ —Å–∫—Ä–∏–Ω–∞ ‚Äî –∫–∞–∫ –±–µ–∑ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞.",
    "üß© –°–∫—Ä–∏–Ω ‚Äî –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å —Ü–µ–ª–æ–≥–æ.",
    "üèÅ –§–∏–Ω–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç ‚Äî –∑–∞—Å–∫—Ä–∏–Ω—å –∏ –≤—Å—ë.",
    "üö¶ –°–∏–≥–Ω–∞–ª –Ω–∞ —Å—Ç–∞—Ä—Ç. –°–∫—Ä–∏–Ω –∞–∫—Ç–∏–≤.",
    "üõé –¢–≤–æ–π —Å–∏–≥–Ω–∞–ª: —Å–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω.",
    "üì° –°–∫—Ä–∏–Ω ‚Äî —Ñ–∏–∫—Å–∞—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è.",
    "üì¨ –°–µ–π—á–∞—Å –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞. –°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω.",
    "üí° –°–∫—Ä–∏–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ —Ç—ã –Ω–µ –∑–∞–±—ã–ª.",
    "üßÆ –ê–∫—Ç–∏–≤ —Å—á–∏—Ç–∞–µ—Ç—Å—è. –°–∫—Ä–∏–Ω ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.",
    "üé¨ –í—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω? –°–∫—Ä–∏–Ω —Å–¥–µ–ª–∞–ª?",
    "‚õ≥ –ù–µ –¥–æ—Ç—è–Ω–∏ –¥–æ –ø—Ä–æ–≤–∞–ª–∞. –°–∫—Ä–∏–Ω—å –≤–æ–≤—Ä–µ–º—è.",
    "üìÜ –í –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –µ—Å—Ç—å —Ç–æ—á–∫–∞ ‚Äî 20:50. –°–∫—Ä–∏–Ω.",
    "üß∑ –°–∫—Ä–∏–Ω ‚Äî —Ç–≤–æ—è –æ—Ç–º–µ—Ç–∫–∞ '—è –±—ã–ª'.",
    "üèó –°–∫—Ä–∏–Ω —É–∫—Ä–µ–ø–ª—è–µ—Ç –¥–æ–≤–µ—Ä–∏–µ.",
    "üïµÔ∏è‚Äç‚ôÇÔ∏è –°–∫—Ä–∏–Ω –¥–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–≤–æ—ë —É—á–∞—Å—Ç–∏–µ.",
    "üß≠ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π ‚Äî –∑–Ω–∞—á–∏—Ç —Å–∫—Ä–∏–Ω–∏–ª.",
    "üì¢ –ù–µ –∑–∞–±—ã–≤–∞–π. –°–∫—Ä–∏–Ω ‚Äî –∫–∞–∫ –æ—Ç—á—ë—Ç.",
    "üí• –°–∫—Ä–∏–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ–π —à–∞–≥. –ù–æ –≤–∞–∂–Ω—ã–π.",
    "üíº –°–¥–µ–ª–∞–π –¥–µ–ª–æ. –°–∫—Ä–∏–Ω—å.",
    "üì± –õ–° –æ—Ç–∫—Ä—ã—Ç. –°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω.",
    "üéì –ë—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º ‚Äî –∑–Ω–∞—á–∏—Ç —Å–∫—Ä–∏–Ω–∏—Ç—å.",
]

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id not in subscribers:
        subscribers.append(user.id)
        save_users(subscribers)
        await context.bot.send_message(user.id, "‚úÖ *–¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!*", parse_mode="MarkdownV2")
    else:
        await context.bot.send_message(user.id, "üòé *–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω*", parse_mode="MarkdownV2")

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data="stop")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", switch_inline_query_current_chat="/list")],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)", callback_data="broadcast")] if user.id == ADMIN_ID else []
    ])
    await context.bot.send_message(user.id, "üìå –ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã:", reply_markup=keyboard)

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id in subscribers:
        subscribers.remove(user.id)
        save_users(subscribers)
        await context.bot.send_message(user.id, "‚ùå *–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*", parse_mode="MarkdownV2")
    else:
        await context.bot.send_message(user.id, "‚ÑπÔ∏è –¢—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω", parse_mode="MarkdownV2")

async def list_subs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type in ("group", "supergroup"):
        if getattr(update.message, "message_thread_id", None) != THREAD_ID:
            return
    lines = ["üìÑ *–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:*"]
    if not subscribers:
        lines.append("_–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç_")
    else:
        for uid in subscribers:
            try:
                user = await context.bot.get_chat(uid)
                if user.username:
                    lines.append(f"‚Ä¢ @{escape(user.username)}")
                elif user.first_name:
                    lines.append(f"‚Ä¢ [{escape(user.first_name)}](tg://user?id={uid})")
                else:
                    lines.append(f"‚Ä¢ [–ø—Ä–æ—Ñ–∏–ª—å](tg://user?id={uid})")
            except:
                lines.append(f"‚Ä¢ [–ø—Ä–æ—Ñ–∏–ª—å](tg://user?id={uid})")
    await context.bot.send_message(update.effective_chat.id, escape("\n".join(lines)), parse_mode="MarkdownV2")

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "stop":
        await stop(update, context)
    elif query.data == "broadcast" and query.from_user.id == ADMIN_ID:
        await query.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        context.user_data["awaiting_broadcast"] = True

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if context.user_data.get("awaiting_broadcast") and user_id == ADMIN_ID:
        text = update.message.text
        context.user_data["awaiting_broadcast"] = False
        success = 0
        fail = 0
        for uid in subscribers:
            try:
                await context.bot.send_message(uid, text)
                success += 1
            except:
                fail += 1
        await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n‚ùå –û—à–∏–±–æ–∫: {fail}")

async def reminder_job(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now(MSK)
    if now.hour == REMINDER_HOUR and now.minute == REMINDER_MINUTE:
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            message_thread_id=THREAD_ID,
            text="20:50 –ú–°–ö üîî –í—Ä–µ–º—è –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω! –í—Å–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ª—Å."
        )
        for uid in subscribers:
            try:
                await context.bot.send_message(uid, random.choice(JOKES))
            except:
                continue

async def send_group_intro(bot):
    bot_info = await bot.get_me()
    bot_link = f"https://t.me/{bot_info.username}"
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –≤ –õ–°", url=bot_link)]
    ])
    await bot.send_message(
        chat_id=GROUP_CHAT_ID,
        message_thread_id=THREAD_ID,
        text=(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—ã –∞–∫—Ç–∏–≤–∞.\n"
            "üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç —Ç–µ–±–µ –≤ –õ–° –∏ —Å—é–¥–∞ ‚Äî –≤ —ç—Ç—É —Ç–µ–º—É.\n"
            "üîî –ù–µ –∑–∞–±—É–¥—å –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram!\n\n"
            "üëâ –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:"
        ),
        reply_markup=keyboard
    )

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("list", list_subs))
    app.add_handler(CallbackQueryHandler(callback_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.job_queue.run_repeating(reminder_job, interval=60, first=10)

    await app.bot.delete_webhook(drop_pending_updates=True)
    await send_group_intro(app.bot)

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())



